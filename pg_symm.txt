      program pgsymm
      implicit none

      real, allocatable, dimension(:)     :: x,y,z,rpq
      real, allocatable, dimension(:)     :: x_o,y_o,z_o
      real, allocatable, dimension(:)     :: rij
      real, allocatable, dimension(:)     :: rG
      real, allocatable, dimension(:)     :: tmin,tdiv
      real, allocatable, dimension(:)     :: G1,fcx,fcy,fcz,rtemp
      real, allocatable, dimension(:,:)   :: xo,yo,zo,x_ns,y_ns,z_ns
      real, allocatable, dimension(:,:)   :: G
      real, allocatable, dimension(:,:,:) :: os_i_jx,os_i_jy,os_i_jz

      integer, allocatable, dimension(:)   :: pmax
      integer, allocatable, dimension(:)   :: t
      integer, allocatable, dimension(:)   :: repeat_list,r12
      integer, allocatable, dimension(:,:) :: outer_list
      integer, allocatable, dimension(:,:) :: face_list,ele
      integer, allocatable, dimension(:,:) :: G_eq

      character(len=2) , allocatable, dimension(:) :: atms
      real, dimension(3) :: ijmax,ijmin,ikmax,ikmin,jkmax,jkmin


      real                        :: r_l
      integer                     :: i,nAtoms,j,k,l
      integer                     :: centre,atm_c,ic
      integer                     :: p,end_val,i_in
      character(len=50)           :: filename
      character(len=2)            :: el,atms1

      real                        :: cx,cy,cz,xn,yn,zn
      real                        :: ril,rjl,rkl,tr_al
      real                        :: chg,max_val,factor
      real                        :: comx,comy,comz
      real                        :: sumx,sumy,sumz
      real                        :: mass,rmin
      real                        :: ranG,rGmin,rG_t,temp
      real                        :: fc,eta,Rc,pi,Rs
      real                        :: rGmax,seg_length
      real                        :: p1,p2,p3
      real                        :: x1,y1,z1,x2,y2,z2,r,fx,fy,fz
      real                        :: r1,r2,r3

      integer                     :: m,n,nDivisions,divs1
      integer                     :: max_el,q
      integer                     :: os,fcount,o_sh,nshells
      integer                     :: tatoms,ix1,ix2,ct,check,nAtoms_temp
      integer                     :: f,s, elem_count,divs
      integer                     :: i1,j1
      integer                     :: nu,de,v,hmax
     
      integer                                      :: io
      character(len=2), allocatable, dimension(:)  :: Co_atms
      real, allocatable, dimension(:)              :: Co_x,Co_y,Co_z

      !----------------------------------------------------------------!
      !      Basic initializations, allocations and file reading       !
      !----------------------------------------------------------------!

      write(*,*) "Enter the name of the file:"
      read(*,*) filename
      write(*,*) "Enter the number of atoms in the core:"
      read(*,*) nAtoms
      write(*,*) "Enter the number of shells:"
      read(*,*) nshells

      mass=24.305
      pi=3.142
      factor=2.0

      allocate(x(nAtoms))
      allocate(y(nAtoms))
      allocate(z(nAtoms))
      allocate(rpq(nAtoms))
      allocate(atms(nAtoms))
      allocate(t(nshells))
      allocate(tmin(nshells),tdiv(nshells))

      
       open(55,file=filename)
       do i=1,nAtoms
       read(55,*) atms(i),x(i),y(i),z(i)
       end do

       
      !----------------------------------------------------------------!
      !       1. Determing the centre of mass of the initial core      !
      !----------------------------------------------------------------!
      

       sumx=0.0
       sumy=0.0
       sumz=0.0

       do i=1,nAtoms
       sumx=sumx+(mass*x(i))
       sumy=sumy+(mass*y(i))
       sumz=sumz+(mass*z(i))
       end do

       comx=sumx/(nAtoms*mass)
       comy=sumy/(nAtoms*mass)
       comz=sumz/(nAtoms*mass)

       if(comx<0.0001.and.comy<0.0001.and.comz<0.0001) then
       comx=0.0
       comy=0.0
       comz=0.0
       end if
      
         open(34)
      ! Main code begins here 
      !!!!!!!!Start the shell concept from here
      ! nAtoms should update each time after each shell calculation

      !----------------------------------------------------------------!
      !     2. Reorienting the original core to the centre of mass     !
      !----------------------------------------------------------------!

         ! readjustment with respect to the center of mass

         do i=1,nAtoms
         x(i)=x(i)-comx
         y(i)=y(i)-comy
         z(i)=z(i)-comz
         end do

         !File '35' is only a step-by-step visualization after the
         !addition of each shell
         open(34)         
         write(35,*) nAtoms
         write(35,*) " "
         do i=1,nAtoms
         write(34,*) "Mg",x(i),y(i),z(i)
         write(155,*) "Mg",x(i),y(i),z(i)
         write(35,*) "Mg",x(i),y(i),z(i)
         end do

      !-----------------------------------------------------------------!
      ! 3.   Determining only the outer shell elements that have to     !
      !      be translated outwards, stored in array x_o,y_o,z_o        !
      !-----------------------------------------------------------------!
      
         allocate(x_o(nAtoms))
         allocate(y_o(nAtoms))
         allocate(z_o(nAtoms))


         os=0
         do i=1,nAtoms
         rjl=sqrt((x(i)-comx)**2+(y(i)-comy)**2+(z(i)-comz)**2)
         if (rjl>(1.0)) then
         os=os+1
         x_o(os)=x(i)
         y_o(os)=y(i)
         z_o(os)=z(i)
!         write(*,*) x_o(os),y_o(os),z_o(os)
         end if
         end do


       
       allocate(xo(nshells,os))
       allocate(yo(nshells,os))
       allocate(zo(nshells,os))


       do i=1,nshells
          do j=1,os
          xo(i,j) = 0.0
          yo(i,j) = 0.0
          zo(i,j) = 0.0
          end do
       end do

      !----------------------------------------------------------------!
      ! 4. Outer shell elements or primary axis elements moved outwards!
      !    by a "factor"                                               !
      !----------------------------------------------------------------!

       max_el=9999999
      

       allocate(x_ns(nshells,max_el))
       allocate(y_ns(nshells,max_el),z_ns(nshells,max_el))
       do i=1,nshells
           do j=1,max_el
           x_ns(i,j) = 0.0
           y_ns(i,j) = 0.0
           z_ns(i,j) = 0.0
           end do
       end do

       do o_sh=1,nshells
!       write(*,*)"Entered shell:",o_sh


        do i=1,os
!        write(*,*) o_sh,i,"Shell",o_sh
        rjl=sqrt((x_o(i)-comx)**2+(y_o(i)-comy)**2+(z_o(i)-comz)**2)
        xo(o_sh,i)=((o_sh*factor)*((x_o(i)-comx)/rjl))+x_o(i)
        yo(o_sh,i)=((o_sh*factor)*((y_o(i)-comy)/rjl))+y_o(i)
        zo(o_sh,i)=((o_sh*factor)*((z_o(i)-comz)/rjl))+z_o(i)

        x_ns(o_sh,i) = xo(o_sh,i)
        y_ns(o_sh,i) = yo(o_sh,i)
        z_ns(o_sh,i) = zo(o_sh,i)
        write(34,*) "Mg",xo(o_sh,i),yo(o_sh,i),zo(o_sh,i) 
        end do
         
         allocate(rij(os*os))
         ct=0
         do i=1,os
            do j=i+1,os
            ct=ct+1
            rij(ct)=sqrt(((xo(o_sh,i)-xo(o_sh,j))**2+&
       &                  (yo(o_sh,i)-yo(o_sh,j))**2+&
       &                  (zo(o_sh,i)-zo(o_sh,j))**2))
             end do
         end do

         rGmin=rij(1)
         do i=1,ct
         if(rij(i)<rGmin) then
           rGmin=rij(i)
         end if
         end do
         deallocate(rij)

      !maximum possible divisions have to be determined

         divs=(rGmin/factor)-1

         write(*,*) "Maximum possible divisions",divs-1

         allocate(os_i_jx(os,os,divs+1))
         allocate(os_i_jy(os,os,divs+1))
         allocate(os_i_jz(os,os,divs+1))
         allocate(outer_list(os,os))

         do i=1,os
            do j=1,os
               do k=1,divs+1
               os_i_jx(i,j,k) = 999.0
               os_i_jy(i,j,k) = 999.0 
               os_i_jz(i,j,k) = 999.0
               end do
            end do
         end do      
         
      !-----------------------------------------------------------------!
      ! 5. Determining all the primary atoms on the o_shth shell and the!
      !    minimum distance between them                                !
      !-----------------------------------------------------------------! 

       allocate(rij(os*os))  
        ct=0
         do i=1,os
            do j=i+1,os
            ct=ct+1
            rij(ct)=sqrt(((xo(o_sh,i)-xo(o_sh,j))**2+&
       &                  (yo(o_sh,i)-yo(o_sh,j))**2+&
       &                  (zo(o_sh,i)-zo(o_sh,j))**2)) 
             end do
         end do

         rGmin=rij(1)
         do i=1,ct
         if(rij(i)<rGmin) then
           rGmin=rij(i)
         end if
         end do
         deallocate(rij)

         tmin(o_sh)=rGmin
         tdiv(o_sh)=divs-1

!         write(*,*) "The minimum distance is:",tmin(o_sh),"shell",o_sh
         

      !----------------------------------------------------------------!
      ! 6. o_sh times bisection between the minimum distanced atoms    !
      !----------------------------------------------------------------!
           t(o_sh)=os
         do i=1,os
         q=1
         !write(*,*)
           do j=i+1,os
              r=sqrt((xo(o_sh,i)-xo(o_sh,j))**2+&
      &                  (yo(o_sh,i)-yo(o_sh,j))**2+&
      &                  (zo(o_sh,i)-zo(o_sh,j))**2)
              if(abs(rGmin-r)<=0.001) then
              outer_list(i,q)=j
!              write(*,*) outer_list(i,q)


!                   i_in=divs1
!                   do while(i_in>=1) 
!                   seg_length=rGmin/i_in
!                   if(seg_length<2.0.or.seg_length>3.0) then
!                   i_in=i_in-1
!                   check=0
!                   else
!                   divs=i_in
!                   i_in=0
!                   check=1
!                   end if
!                   end do
                       
              q=q+1

              n=1
              nDivisions=(rGmin/factor)-1
              m=nDivisions
              p=1
              x1=xo(o_sh,i)
              y1=yo(o_sh,i)
              z1=zo(o_sh,i)
              os_i_jx(i,j,p) = x1
              os_i_jy(i,j,p) = y1
              os_i_jz(i,j,p) = z1

              p=p+1
              x2=xo(o_sh,j)
              y2=yo(o_sh,j)
              z2=zo(o_sh,j)
              os_i_jx(i,j,p) = x2
              os_i_jy(i,j,p) = y2
              os_i_jz(i,j,p) = z2

                do while(m>=1)
                p=p+1
                fx=((((n*x1))+(m*x2))/(m+n))
                fy=((((n*y1))+(m*y2))/(m+n))
                fz=((((n*z1))+(m*z2))/(m+n))
                write(34,*) "Mg",fx,fy,fz
                
                t(o_sh)=t(o_sh)+1
                x_ns(o_sh,t(o_sh)) = fx
                y_ns(o_sh,t(o_sh)) = fy
                z_ns(o_sh,t(o_sh)) = fz
                os_i_jx(i,j,p) = fx
                os_i_jy(i,j,p) = fy
                os_i_jz(i,j,p) = fz
                n=n+1           
                m=m-1
                if(m<1) then
                exit
                end if
                end do

              end if
         end do
       end do
       
      
      !----------------------------------------------------------------------!
      !        7. Find the equilateral faces in the icosahedron              !
      !----------------------------------------------------------------------!             


     if(o_sh > 1)then       

      ! do i=1,os
      ! write(170,*) " "
      ! write(170,*) i
      !    do j=1,os
      !    if(outer_list(i,j) .ne. 0 ) then
      !       write(170,*) outer_list(i,j)
      !    end if
      !    end do
      ! end do   

       open(171)
       f=0
       do i=1,os
          do j=1,os
             do k=j+1,os
             if(outer_list(i,j)> 0 .and. outer_list(i,k) > 0) then
                do l=1,os
                  if( outer_list(j,l) > 0 ) then
                    if(outer_list(outer_list(i,j),l)==outer_list(i,k)) then
                       f=f+1
                       write(171,*) i,outer_list(i,j),outer_list(i,k)
                    end if   
        
             end if
       
                end do
          end if
             end do
           end do
       end do   
       close(171)
       allocate(face_list(f,3))
       open(171)
       do i=1,f
       read(171,*) face_list(i,1),face_list(i,2),face_list(i,3)
       end do
       close(171)

       do s=1,f  ! rows
          i=face_list(s,1)
          j=face_list(s,2)
          k=face_list(s,3)
          open(99)   
         ! elem_count=3+(o_sh*3)
        
       elem_count=0
         ! write(120,*) elem_count
          write(120,*) "  "
          do p=1,divs+1
          if(os_i_jx(i,j,p).ne.999.0) then
          write(99,*) "Mg",os_i_jx(i,j,p),os_i_jy(i,j,p),os_i_jz(i,j,p)
          write(120,*) "Mg",os_i_jx(i,j,p),os_i_jy(i,j,p),os_i_jz(i,j,p)
          elem_count=elem_count+1
          end if
          end do

          do p=2,divs+1
          if(os_i_jx(i,k,p).ne.999.0) then
          write(99,*) "Mg",os_i_jx(i,k,p),os_i_jy(i,k,p),os_i_jz(i,k,p)
          write(120,*) "Mg",os_i_jx(i,k,p),os_i_jy(i,k,p),os_i_jz(i,k,p)
          elem_count=elem_count+1
          end if
          end do

          do p=3,divs+1
          if(os_i_jx(j,k,p).ne.999.0) then
          write(99,*) "Mg",os_i_jx(j,k,p),os_i_jy(j,k,p),os_i_jz(j,k,p)
          write(120,*) "Mg",os_i_jx(j,k,p),os_i_jy(j,k,p),os_i_jz(j,k,p)
          elem_count=elem_count+1
          end if
          end do
          close(99)

          allocate(fcx(elem_count))
          allocate(fcy(elem_count))
          allocate(fcz(elem_count))
          allocate(G1(elem_count))

          Rc=4.0
          eta=0.015
          Rs=0.0
          pi=3.142
          write(*,*) "No of elements found:",elem_count,o_sh
          open(99) 
          
          do i=1,elem_count
          read(99,*) atms1,fcx(i),fcy(i),fcz(i)
          end do
          close(99)
          do i=1,elem_count
          write(101,*) atms1,fcx(i),fcy(i),fcz(i)
          end do

      !-----------------------------------------------------------------!
      !     8. Determining the atoms with similar characteristics to    !
      !        carry out further bisection and filling the voids        ! 
      !-----------------------------------------------------------------!

       do i=1,elem_count
       G1(i)=0.0
          do j=1,elem_count
          r1=sqrt((fcx(i)-fcx(j))**2+(fcy(i)-fcy(j))**2+ & 
     &            (fcz(i)-fcz(j))**2)
          if (r1<=Rc) then
          fc=0.5*(cos((pi*pi*r1)/(180.0*Rc))+1.0)
          else
          fc=0.0
          end if
          G1(i)=G1(i)+(exp(-eta*(r1-Rs)**2)*fc)
          end do

          write(101,*) i,G1(i)
       end do
     
       allocate(ele(elem_count,elem_count))
       allocate(pmax(elem_count))

       do i=1,elem_count
         do j=1,elem_count
            ele(i,p) = 0
         end do
       end do
       

       !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
       !      Determining the same valued Radial Symmetry Function     !
       !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

       do i=1,elem_count
       p=1
       ele(i,p) = i
          do j=i+1,elem_count
             if(G1(i).ne.-1.0.and.abs(G1(i)-G1(j))<=0.0001) then
             p=p+1
             ele(i,p)=j
             G1(j)=-1.0
             end if
          end do
          pmax(i)=p
       end do

       !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!
       ! Determining the magnitude of bisection between equal SF atoms !
       !~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!

       do i=1,elem_count
          if(pmax(i) > 1) then
          nu=1
          de=2

          do p=1,pmax(i)
          nu=nu*p
          end do

          do p=1,pmax(i)-2
          de=de*p
          end do
          v=nu/de
!          write(*,*) "Allocation of locations:",v,o_sh
          allocate(rtemp(v))
          ct=0
          do j=1,pmax(i)
             do k=j+1,pmax(i)
                i1=ele(i,j)
                j1=ele(i,k)
                ct=ct+1
                rtemp(ct)= sqrt((fcx(i1)-fcx(j1))**2+ & 
     &                          (fcy(i1)-fcy(j1))**2+ &
     &                          (fcz(i1)-fcz(j1))**2)
             end do
          end do
!          write(*,*) maxval(rtemp),"is the maxval"
                  
          rGmax=maxval(rtemp)
          deallocate(rtemp)
          do j=1,pmax(i)
             do k=j+1,pmax(i)
                if((any(xo(o_sh,1:os) .ne. fcx(ele(i,j)))).and. &
     &             (any(yo(o_sh,1:os) .ne. fcy(ele(i,j)))).and. &
     &             (any(zo(o_sh,1:os) .ne. fcz(ele(i,j)))).and. &
     &             (any(xo(o_sh,1:os) .ne. fcx(ele(i,k)))).and. &
     &             (any(yo(o_sh,1:os) .ne. fcy(ele(i,k)))).and. &
     &             (any(zo(o_sh,1:os) .ne. fcz(ele(i,k))))) then

!      write(*,*) (xo(o_sh,l),l=1,os),"%% ",fcx(ele(i,j)),fcx(ele(i,k))
!      write(*,*) (yo(o_sh,l),l=1,os),"%% ",fcy(ele(i,j)),fcy(ele(i,k))
!      write(*,*) (zo(o_sh,l),l=1,os),"%% ",fcz(ele(i,j)),fcz(ele(i,k))
                i1=ele(i,j)
                j1=ele(i,k)
                ct=ct+1
                r1=sqrt((fcx(i1)-fcx(j1))**2+(fcy(i1)-fcy(j1))**2+ &
     &                  (fcz(i1)-fcz(j1))**2)

             !  if((i1.ne.1.and.j1.ne.2).or. & 
             !     (i1.ne.2.and.i1.ne.1).or. &
     &       !     (i1.ne.1.and.j1.ne.(nshells+divs)).or. &
             !     (i1.ne.(nshells+divs).or.j1.ne.1) .or. &
             !     (i1.ne.2.and.j1.ne.(nshells+divs)).or. &
             !     (i1.ne.(nshells+divs).or.j1.ne.2)) then
                  
                  if(abs(rGmax-r1)<=0.0001) then  
                    ! choosing how much it should bisect
                          i_in=tdiv(o_sh)
                          do while(i_in>=1) 
                          seg_length=rGmin/i_in
                          if(seg_length<2.0.or.seg_length>3.0) then
                          i_in=i_in-1
                          else
                          divs=i_in
                          i_in=0
                          end if
                          end do

                          write(*,*) "In shell",o_sh,divs


                     x1=fcx(i1)
                     y1=fcy(i1)
                     z1=fcz(i1)

                     x2=fcx(j1)
                     y2=fcy(j1)
                     z2=fcz(j1)

                     n=1
                     m=(rGmin/factor) -1 

                     do while(m>=1)
                         
                         fx=((((n*x1))+(m*x2))/(m+n))
                         fy=((((n*y1))+(m*y2))/(m+n))
                         fz=((((n*z1))+(m*z2))/(m+n))
                         write(34,*) "Mg",fx,fy,fz
                         n=n+1
                         m=m-1
                         if(m<1) then
                         exit
                         end if
                         end do
                   end if
                else

                 write(*,*) "Found a match",ele(i,j),ele(i,k)
           end if
             end do
          end do              


                  end if
        end do
          
          deallocate(ele)   
          deallocate(pmax)
!          write(*,*) "Came for deallocation"
          deallocate(fcx)
          deallocate(fcy)
          deallocate(fcz)
          deallocate(G1)

          end do   
       deallocate(face_list) ! move post calcualtions
       end if  ! if(o_sh>1)  
 
         deallocate(outer_list)
         deallocate(os_i_jx)
         deallocate(os_i_jy)
         deallocate(os_i_jz)

        end do ! end of nshell

        close(34)

      !----------------------------------------------------------------!
      ! 9. Removal of all repeating coordinates(x,y,z) while bisecting !
      !----------------------------------------------------------------!

        open(25,file='fort.34',status='unknown',action='read')
        m=0
        do
        read(25,*,iostat=io)
        if(io/=0) exit
        m=m+1
        end do

        allocate(Co_atms(m))
        allocate(Co_x(m),Co_y(m),Co_z(m))
        rewind(25)
     
        deallocate(Co_atms)
        deallocate(Co_x,Co_y,Co_z)
        close(25)

        allocate(Co_atms(m))
        allocate(Co_x(m),Co_y(m),Co_z(m))

        open(25,file='fort.34')
        do i=1,m
        read(25,*) Co_atms(i),Co_x(i),Co_y(i),Co_z(i)
        end do

        ct=0
        do i=1,m
           do j=i+1,m
           r1=sqrt((Co_x(i)-Co_x(j))**2+ &
     &             (Co_y(i)-Co_y(j))**2+ &
                   (Co_z(i)-Co_z(j))**2)
           if((abs(Co_x(i)-Co_x(j))<0.0001).and. & 
     &        (abs(Co_y(i)-Co_y(j))<0.0001).and. & 
     &        (abs(Co_z(i)-Co_z(j))<0.0001)) then
              Co_x(j)=2441139.0
              Co_y(j)=2441139.0
              Co_z(j)=2441139.0

           
          else if(r1<1.2) then
          Co_x(j)=2441139.0
          Co_y(j)=2441139.0
          Co_z(j)=2441139.0
           end if
           end do
        end do

       write(filename,'(i0,A)') nshells,"-shells.xyz"
       open(26,file=filename)
       do i=1,m
         if(Co_x(i).ne.2441139.0.and.Co_y(i).ne.2441139.0.and. & 
     &      Co_z(i).ne.2441139.0) then   
            write(26,*) Co_atms(i),Co_x(i),Co_y(i),Co_z(i)
         end if
       end do


        
       stop
       end

 
     

 

